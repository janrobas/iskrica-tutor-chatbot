[
  "PRO1: Konkretna izpitna naloga - Zanke in tabele\n\nNaloga: Napiši program, ki prebere 10 števil od uporabnika in jih shrani v tabelo. Nato izpiši vsoto vseh števil v tabeli in povprečno vrednost.\n\nRešitev:\nint[] stevila = new int[10];\nint vsota = 0;\n\nfor (int i = 0; i < 10; i++) {\n    Console.Write($\"Vnesi število {i + 1}: \");\n    stevila[i] = int.Parse(Console.ReadLine());\n    vsota += stevila[i];\n}\n\ndouble povprecje = (double)vsota / stevila.Length;\nConsole.WriteLine($\"Vsota: {vsota}\");\nConsole.WriteLine($\"Povprečje: {povprecje:F2}\");",

  "PRO1: Konkretna izpitna naloga - Razredi in objekti\n\nNaloga: Definiraj razred 'Student' z lastnostmi 'Ime', 'Priimek' in 'VpisnaStevilka'. Napiši metodo 'PredstaviSe()', ki izpiše podatke o studentu. Ustvari dva objekta tega razreda in ju predstavi.\n\nRešitev:\nclass Student {\n    public string Ime;\n    public string Priimek;\n    public string VpisnaStevilka;\n    \n    public void PredstaviSe() {\n        Console.WriteLine($\"Sem {Ime} {Priimek}, vpisna številka: {VpisnaStevilka}\");\n    }\n}\n\n// Uporaba:\nStudent student1 = new Student();\nstudent1.Ime = \"Ana\";\nstudent1.Priimek = \"Kovač\";\nstudent1.VpisnaStevilka = \"E1067890\";\nstudent1.PredstaviSe();",

  "PRO1: Konkretna izpitna naloga - Metode\n\nNaloga: Napiši metodo 'JePrastevilo', ki prejme celo število in vrne true, če je število praštevilo, sicer false. V glavnem programu preveri števila od 1 do 20.\n\nRešitev:\nstatic bool JePrastevilo(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= Math.Sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// Uporaba:\nfor (int i = 1; i <= 20; i++) {\n    if (JePrastevilo(i)) {\n        Console.WriteLine($\"{i} je praštevilo\");\n    }\n}",

  "PRO1: Konkretna izpitna naloga - Datoteke\n\nNaloga: Napiši program, ki prebere vsebino datoteke 'ocene.txt', v kateri so ocene ločene z vejicami. Izračunaj povprečno oceno in jo zapiši v datoteko 'povprecje.txt'.\n\nRešitev:\nstring vsebina = File.ReadAllText(\"ocene.txt\");\nstring[] oceneNizi = vsebina.Split(',');\nint vsota = 0;\n\nforeach (string ocenaNiz in oceneNizi) {\n    if (int.TryParse(ocenaNiz.Trim(), out int ocena)) {\n        vsota += ocena;\n    }\n}\n\ndouble povprecje = (double)vsota / oceneNizi.Length;\nFile.WriteAllText(\"povprecje.txt\", $\"Povprečna ocena: {povprecje:F2}\");",

  "PRO1: Konkretna izpitna naloga - Nizi\n\nNaloga: Napiši program, ki prebere poljuben niz in prešteje, kolikokrat se v njem pojavi vsak samoglasnik (a, e, i, o, u).\n\nRešitev:\nstring niz = Console.ReadLine().ToLower();\nchar[] samoglasniki = { 'a', 'e', 'i', 'o', 'u' };\nint[] stevci = new int[5];\n\nforeach (char znak in niz) {\n    int index = Array.IndexOf(samoglasniki, znak);\n    if (index != -1) {\n        stevci[index]++;\n    }\n}\n\nfor (int i = 0; i < samoglasniki.Length; i++) {\n    Console.WriteLine($\"{samoglasniki[i]}: {stevci[i]}\");\n}",

  "PRO1: Konkretna izpitna naloga - 2D tabele\n\nNaloga: Ustvari 2D tabelo 3x3 in jo napolni z naključnimi števili od 1 do 10. Izpiši vsoto vseh elementov in vsoto elementov na diagonali.\n\nRešitev:\nint[,] matrika = new int[3, 3];\nRandom rnd = new Random();\nint vsotaVseh = 0;\nint vsotaDiagonale = 0;\n\nfor (int i = 0; i < 3; i++) {\n    for (int j = 0; j < 3; j++) {\n        matrika[i, j] = rnd.Next(1, 11);\n        vsotaVseh += matrika[i, j];\n        if (i == j) {\n            vsotaDiagonale += matrika[i, j];\n        }\n    }\n}\n\nConsole.WriteLine($\"Vsota vseh: {vsotaVseh}\");\nConsole.WriteLine($\"Vsota diagonale: {vsotaDiagonale}\");",

  "PRO1: Tipične izpitne naloge - kategorije\n\n1. ZANKE IN TABELE (1-2 točki)\n- Izračun vsote/povprečja števil v tabeli\n- Iskanje največjega/najmanjšega elementa\n- Filtriranje elementov (soda, liha, deljiva z X)\n\n2. METODE (2-3 točke)\n- Pisanje metod s parametri in vračanjem vrednosti\n- Preverjanje praštevil, palindromov\n- Izračuni (fakulteta, Fibonacci)\n\n3. RAZREDI IN OBJEKTI (2 točki)\n- Definicija razreda s konstruktorji\n- Ustvarjanje objektov in uporaba metod\n- Delo z več objekti\n\n4. DATOTEKE (2 točki)\n- Branje in pisanje v datoteke\n- Obdelava podatkov iz datotek\n- Formatiran izpis",

  "PRO1: Praktični nasveti za reševanje izpitnih nalog\n\n1. Preberi celotno nalogo pred začetkom\n2. Začni z deli, ki jih znaš najbolje\n3. Preveri, ali tvoj program deluje z različnimi vhodi\n4. Komentiraj kodo - lahko ti prinese dodatne točke\n5. Preveri mejne primere (n = 0, prazna tabela)\n6. Če ne znaš celotne naloge, napiši vsaj del\n\nČasovni okvir: 60 minut\nOcenjevanje:\n- <5 točk: 5\n- 5-5.5: 6\n- 6-6.5: 7\n- 7-7.5: 8\n- 8-8.5: 9\n- 9-10: 10",

  "PRO1: Osnove programiranja - Izpis in vnos\n\nConsole.WriteLine(\"Pozdravljeni!\");  // Izpis z novo vrstico\nConsole.Write(\"Vnesi ime: \");        // Izpis brez nove vrstice\nstring ime = Console.ReadLine();     // Branje niza\nint starost = int.Parse(Console.ReadLine());  // Branje števila\n\nSpremenljivke:\nstring ime = \"Janez\";\nint starost = 20;\ndouble teza = 75.5;\nbool jePrijavljen = true;",

  "PRO1: Pogojni stavki in vejitve\n\nif (starost >= 18) {\n    Console.WriteLine(\"Polnoletni\");\n} else if (starost >= 15) {\n    Console.WriteLine(\"Mladoletni\");\n} else {\n    Console.WriteLine(\"Otrok\");\n}\n\nswitch (dan) {\n    case 1: Console.WriteLine(\"Ponedeljek\"); break;\n    case 2: Console.WriteLine(\"Torek\"); break;\n    default: Console.WriteLine(\"Nedelja\"); break;\n}",

  "PRO1: Zanke - while, do-while, for\n\nfor (int i = 1; i <= 10; i++) {\n    Console.WriteLine(i);\n}\n\nint stevec = 1;\nwhile (stevec <= 10) {\n    Console.WriteLine(stevec);\n    stevec++;\n}\n\nint geslo;\ndo {\n    Console.Write(\"Vnesi geslo: \");\n    geslo = int.Parse(Console.ReadLine());\n} while (geslo != 1234);",

  "PRO1: Tabele in delo z njimi\n\nint[] stevila = new int[5];        // Prazna tabela\nint[] stevila = {1, 2, 3, 4, 5};  // Tabela z vrednostmi\n\nstevila[0] = 10;      // Dostop do elementa\nint x = stevila[2];   // Branje vrednosti\nint dolzina = stevila.Length;  // Dolžina tabele\n\nArray.Sort(stevila);  // Sortiranje\nArray.Reverse(stevila);  // Obrat vrstnega reda",

  "PRO1: Metode - osnove\n\nstatic int Sestej(int a, int b) {\n    return a + b;\n}\n\nstatic void Pozdrav(string ime) {\n    Console.WriteLine($\"Pozdravljen, {ime}!\");\n}\n\n// Klic metod:\nint rezultat = Sestej(5, 3);\nPozdrav(\"Ana\");",

  "PRO1: Razredi in objekti\n\nclass Avto {\n    public string Znamka;\n    public int Letnik;\n    \n    public void PrikaziPodatke() {\n        Console.WriteLine($\"Znamka: {Znamka}, Letnik: {Letnik}\");\n    }\n}\n\n// Uporaba:\nAvto mojAvto = new Avto();\nmojAvto.Znamka = \"Toyota\";\nmojAvto.Letnik = 2020;\nmojAvto.PrikaziPodatke();",

  "PRO1: Delo z datotekami\n\nusing System.IO;\n\n// Preverjanje obstoja\nif (File.Exists(\"test.txt\")) {\n    // Branje\n    string vsebina = File.ReadAllText(\"test.txt\");\n    string[] vrstice = File.ReadAllLines(\"test.txt\");\n    \n    // Pisanje\n    File.WriteAllText(\"izhod.txt\", vsebina);\n    File.AppendAllText(\"dnevnik.txt\", \"Nov zapis\\n\");\n}",

  "PRO1: Nizi in metode nad njimi\n\nstring ime = \"Janez Novak\";\n\nime.Length                    // Dolžina niza\nime.ToUpper()                 // Velike črke\nime.ToLower()                 // Male črke\nime.Substring(0, 5)           // Podniz\nime.IndexOf(\" \")              // Iskanje pozicije\nime.Replace(\" \", \"-\")         // Zamenjava\nime.Trim()                    // Odstranjevanje presledkov\nime.Split(' ')                // Razdelitev na tabelo",

  "PRO1: Matematika in naključna števila\n\nMath.Sqrt(25)                 // Kvadratni koren (5)\nMath.Pow(2, 3)                // Potenca (8)\nMath.Max(10, 20)              // Večje število (20)\nMath.Round(3.14159, 2)        // Zaokroževanje (3.14)\n\nRandom rnd = new Random();\nrnd.Next(1, 101)              // Naključno število 1-100\nrnd.NextDouble()               // Naključno decimalno 0-1",

  "PRO1: Uvod v programiranje - Izpis in vnos podatkov\n\nIzpis v konzolo:\nConsole.WriteLine(\"Pozdravljeni!\"); // Izpis z novo vrstico\nConsole.Write(\"Vnesite ime: \"); // Izpis brez nove vrstice\n\nVnos iz konzole:\nstring ime = Console.ReadLine();\nint starost = int.Parse(Console.ReadLine());\n\nSpremenljivke in tipi podatkov:\nstring ime = \"Ana\";        // Niz znakov\nint starost = 20;           // Celo število\ndouble teza = 55.5;         // Decimalno število\nbool jePrijavljen = true;   // Logična vrednost\nchar znak = 'A';            // Posamezen znak",

  "PRO1: Pogojni stavki in vejitve\n\nOsnovni if stavek:\nif (starost >= 18) {\n    Console.WriteLine(\"Polnoletni ste\");\n}\n\nIf-else if-else:\nif (ocena >= 90) {\n    Console.WriteLine(\"Odlično\");\n} else if (ocena >= 80) {\n    Console.WriteLine(\"Prav dobro\");\n} else {\n    Console.WriteLine(\"Vaje potrebujejo\");\n}\n\nPrimerjave in logični operatorji:\n== (enako), != (različno), >, <, >=, <=\n&& (IN), || (ALI), ! (NE)\n\nSwitch stavek:\nswitch (dan) {\n    case 1: Console.WriteLine(\"Ponedeljek\"); break;\n    case 2: Console.WriteLine(\"Torek\"); break;\n    default: Console.WriteLine(\"Nedelja\"); break;\n}",

  "PRO1: Zanke - while, do-while, for\n\nZanka while:\nint i = 1;\nwhile (i <= 5) {\n    Console.WriteLine(i);\n    i++;\n}\n\nZanka do-while (vedno vsaj enkrat):\nint stevilo;\ndo {\n    Console.Write(\"Vnesite pozitivno število: \");\n    stevilo = int.Parse(Console.ReadLine());\n} while (stevilo <= 0);\n\nZanka for:\nfor (int i = 0; i < 10; i++) {\n    Console.WriteLine(\"Številka: \" + i);\n}\n\nOkrajšave:\ni++  // i = i + 1\ni--  // i = i - 1\ni += 5  // i = i + 5",

  "PRO1: Tabele (array)\n\nDeklaracija in inicializacija 1D tabele:\nint[] stevila = new int[5];  // Tabela 5 celih števil\nint[] stevila = {1, 2, 3, 4, 5};  // Inicializacija z vrednostmi\n\nDostop do elementov:\nstevila[0] = 10;        // Prvi element\nint x = stevila[2];     // Branje tretjega elementa\n\nDolžina tabele:\nint dolzina = stevila.Length;\n\nSpreminjanje velikosti:\nArray.Resize(ref stevila, 10);  // Nova velikost 10\n\n2D tabele:\nint[,] matrika = new int[3,3];  // 3x3 matrika\nmatrika[0,0] = 1;  // Prvi element",

  "PRO1: Metode in funkcije\n\nMetoda, ki vrača vrednost:\nstatic int Sestej(int a, int b) {\n    return a + b;\n}\n\nUporaba:\nint rezultat = Sestej(5, 3);  // rezultat = 8\n\nVoid metoda (ne vrača vrednosti):\nstatic void Pozdrav(string ime) {\n    Console.WriteLine(\"Pozdravljen, \" + ime);\n}\n\nKlic:\nPozdrav(\"Ana\");\n\nZakaj uporabljamo metode:\n- Izognemo podvajanju kode\n- Boljša berljivost\n- Lažje popravljanje napak\n- Enostavnejše testiranje",

  "PRO1: Razredi in objekti\n\nDefinicija razreda:\nclass Student {\n    public string Ime;\n    public string Priimek;\n    public int Letnik;\n}\n\nUstvarjanje objekta:\nStudent student1 = new Student();\nstudent1.Ime = \"Miha\";\nstudent1.Priimek = \"Novak\";\nstudent1.Letnik = 1;\n\nKonstruktorji:\nclass Student {\n    public Student(string i, string p) {\n        Ime = i;\n        Priimek = p;\n    }\n}\n\nUporaba:\nStudent student2 = new Student(\"Ana\", \"Kovač\");",

  "PRO1: Delo z nizi (string)\n\nOsnovne operacije:\nstring ime = \"Janez Novak\";\nchar prvaCrka = ime[0];  // 'J'\nint dolzina = ime.Length;  // 11\n\nPogoste metode:\nstring velike = ime.ToUpper();  // \"JANEZ NOVAK\"\nmale = ime.ToLower();  // \"janez novak\"\nstring del = ime.Substring(0, 5);  // \"Janez\"\nbool vsebuje = ime.Contains(\"Nov\");  // true\nint pozicija = ime.IndexOf(\" \");  // 5\nstring brezPresledkov = ime.Trim();\nstring zamenjano = ime.Replace(\" \", \"-\");",

  "PRO1: Delo z datotekami\n\nDodaj using System.IO;\n\nPreverjanje obstoja:\nif (File.Exists(\"test.txt\")) {\n    Console.WriteLine(\"Datoteka obstaja\");\n}\n\nBranje datotek:\nstring vsebina = File.ReadAllText(\"test.txt\");\nstring[] vrstice = File.ReadAllLines(\"test.txt\");\n\nPisanje v datoteko:\nFile.WriteAllText(\"izhod.txt\", \"Nova vsebina\");\nFile.WriteAllLines(\"izhod.txt\", vrstice);\n\nDodajanje vsebine:\nFile.AppendAllText(\"dnevnik.txt\", \"Nov zapis\\n\");",

  "PRO1: Matematika in naključna števila\n\nMatematične funkcije (Math):\ndouble koren = Math.Sqrt(25);  // 5\ndouble potenca = Math.Pow(2, 3);  // 8\ndouble absolutno = Math.Abs(-5);  // 5\ndouble zaokroženo = Math.Round(3.14159, 2);  // 3.14\nint maksimum = Math.Max(10, 20);  // 20\n\nNaključna števila:\nRandom rnd = new Random();\nint nakljucno = rnd.Next(1, 101);  // Število med 1 in 100\nint kocka = rnd.Next(1, 7);  // Met kocke",

  "PRO1: Objektno orientirano programiranje - metode v razredih\n\nMetode v razredih delajo na podatkih objekta:\nclass Student {\n    public string Ime;\n    public int Starost;\n    \n    public void PredstaviSe() {\n        Console.WriteLine($\"Sem {Ime}, star {Starost} let\");\n    }\n    \n    public bool JePolnoleten() {\n        return Starost >= 18;\n    }\n}\n\nUporaba:\nStudent s = new Student();\ns.Ime = \"Peter\";\ns.Starost = 20;\ns.PredstaviSe();  // Izpiše: Sem Peter, star 20 let\nbool polnoleten = s.JePolnoleten();  // true",

  "PRO1: Obveznosti in zahteve za predmet\n\nZa uspešno opravljen predmet potrebujete:\n- Vsaj 80% prisotnost na vajah\n- Sprotno oddane domače naloge\n- Izdelano seminarsko nalogo z zagovorom\n- Opravljen pisni izpit\n\nSeminarska naloga mora vsebovati:\n- Lastne razrede in objekte\n- Delo s tabelami\n- Branje/pisanje datotek\n- Uporabniški vmesnik (konzolni ali grafični)\n\nIzpit: 60 minut, teoretična in praktična naloga",

  "PRO1: Pogoste napake in nasveti za programiranje\n\nPogoste napake:\n- Pozabljeni podpičji\n- Napake v velikosti črk (C# je občutljiv)\n- Indeksi začnejo z 0, ne z 1\n- Napačno pretvarjanje tipov\n\nNasveti za programiranje:\n- Piši berljivo kodo z smiselnimi imeni\n- Uporabljaj metode za razbijanje kompleksnih problemov\n- Testiraj kodo pogosto\n- Komentiraj kompleksne dele kode\n- Vedno preverjaj, če datoteka obstaja, preden jo bereš",

  "PRO1: Primer seminarske naloge - osnovna struktura\n\nOsnovna struktura konzolne aplikacije:\nusing System;\n\nclass Program {\n    static void Main() {\n        Console.OutputEncoding = System.Text.Encoding.UTF8;\n        \n        while (true) {\n            Console.WriteLine(\"1 - Opcija 1\");\n            Console.WriteLine(\"2 - Opcija 2\");\n            Console.WriteLine(\"3 - Izhod\");\n            \n            string izbira = Console.ReadLine();\n            \n            switch (izbira) {\n                case \"1\": Opcija1(); break;\n                case \"2\": Opcija2(); break;\n                case \"3\": return;\n            }\n        }\n    }\n    \n    static void Opcija1() {\n        // Koda za prvo opcijo\n    }\n}",

  "PRO1: Razlaga tipičnih izpitnih nalog\n\nNaloga 1: Zanke (1 točka)\nNapiši zanko, ki izpiše vsa soda števila od 1 do 20.\n\nRešitev:\nfor (int i = 1; i <= 20; i++) {\n    if (i % 2 == 0) {\n        Console.WriteLine(i);\n    }\n}\n\nNaloga 2: Tabele (2 točki)\nUstvari tabelo 10 števil in izračunaj njihovo vsoto.\n\nRešitev:\nint[] stevila = new int[10];\nint vsota = 0;\nfor (int i = 0; i < stevila.Length; i++) {\n    vsota += stevila[i];\n}",

  "PRO1: Debugging in odkrivanje napak\n\nTehnike za iskanje napak:\n- Uporabi Console.WriteLine za izpis vmesnih vrednosti\n- Preveri vrednosti spremenljivk v debuggerju\n- Razčleni kompleksen problem na manjše dele\n- Preveri mejne primere (npr. prazna tabela)\n\nPogoste napake pri zankah:\n- Neskončne zanke (pozabljen inkrement)\n- Napačni pogoji\n- Indeksi zunaj meja tabele\n\nPomembno: Vedno preveri vnos uporabnika (npr. če vnese število namesto niza)",

  "PRO1: Pretvarjanje med tipi podatkov\n\nString v int:\nstring vnos = \"123\";\nint stevilo = int.Parse(vnos);\n\nVarnejši način:\nif (int.TryParse(vnos, out int stevilo)) {\n    // Uspešno pretvorjeno\n} else {\n    Console.WriteLine(\"Napaka pri pretvorbi\");\n}\n\nInt v string:\nint x = 42;\nstring niz = x.ToString();\n\nDouble v int:\ndouble d = 3.14;\nint i = (int)d;  // i = 3 (odreže decimalno vejico)",

  "PRO1: Osnove objektnega programiranja - principi\n\nOsnovni principi OOP:\n\n1. **Enkapsulacija** - skrivanje podatkov\nclass Student {\n    private string ime;  // privatno polje\n    public string Ime {  // javna lastnost\n        get { return ime; }\n        set { ime = value; }\n    }\n}\n\n2. **Dedovanje** - razširjanje razredov\nclass Absolvent : Student {\n    public int LetnikDiplome;\n}\n\n3. **Polimorfizem** - različne oblike metod\npublic virtual void Pozdrav() { }\npublic override void Pozdrav() { }",

  "Slovenska himna (Zdravljica): Živé naj vsi naródi,\nki hrepené dočakat' dan,\nda koder sonce hodi,\nprepir iz svéta bo pregnan,\nda rojak\nprost bo vsak,\nne vrag, le sosed bo mejak!",

  "Predmet programiranje 1 (pro1) uči Jan Robas.",

  "Programiranje 1 (pro1) - teacher is Jan Robas.",

  "PRO1: Concrete Exam Problem - Loops and Arrays\n\nTask: Write a program that reads 10 numbers from the user, stores them in an array, then calculates and displays the sum and average of all numbers.\n\nSolution:\nint[] numbers = new int[10];\nint sum = 0;\n\nfor (int i = 0; i < 10; i++) {\n    Console.Write($\"Enter number {i + 1}: \");\n    numbers[i] = int.Parse(Console.ReadLine());\n    sum += numbers[i];\n}\n\ndouble average = (double)sum / numbers.Length;\nConsole.WriteLine($\"Sum: {sum}\");\nConsole.WriteLine($\"Average: {average:F2}\");",

  "PRO1: Concrete Exam Problem - Classes and Objects\n\nTask: Define a 'Student' class with properties 'FirstName', 'LastName', and 'StudentID'. Write a method 'IntroduceYourself()' that displays student information. Create two objects of this class and call the method.\n\nSolution:\nclass Student {\n    public string FirstName;\n    public string LastName;\n    public string StudentID;\n    \n    public void IntroduceYourself() {\n        Console.WriteLine($\"I am {FirstName} {LastName}, student ID: {StudentID}\");\n    }\n}\n\n// Usage:\nStudent student1 = new Student();\nstudent1.FirstName = \"Ana\";\nstudent1.LastName = \"Kovač\";\nstudent1.StudentID = \"E1067890\";\nstudent1.IntroduceYourself();",

  "PRO1: Concrete Exam Problem - Methods\n\nTask: Write a method 'IsPrime' that takes an integer and returns true if the number is prime, otherwise false. In the main program, check numbers from 1 to 20.\n\nSolution:\nstatic bool IsPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= Math.Sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// Usage:\nfor (int i = 1; i <= 20; i++) {\n    if (IsPrime(i)) {\n        Console.WriteLine($\"{i} is prime\");\n    }\n}",

  "PRO1: Concrete Exam Problem - File Handling\n\nTask: Write a program that reads the content of file 'grades.txt' containing grades separated by commas. Calculate the average grade and write it to file 'average.txt'.\n\nSolution:\nstring content = File.ReadAllText(\"grades.txt\");\nstring[] gradeStrings = content.Split(',');\nint sum = 0;\n\nforeach (string gradeString in gradeStrings) {\n    if (int.TryParse(gradeString.Trim(), out int grade)) {\n        sum += grade;\n    }\n}\n\ndouble average = (double)sum / gradeStrings.Length;\nFile.WriteAllText(\"average.txt\", $\"Average grade: {average:F2}\");",

  "PRO1: Concrete Exam Problem - Strings\n\nTask: Write a program that reads any string and counts how many times each vowel (a, e, i, o, u) appears in it.\n\nSolution:\nstring text = Console.ReadLine().ToLower();\nchar[] vowels = { 'a', 'e', 'i', 'o', 'u' };\nint[] counters = new int[5];\n\nforeach (char character in text) {\n    int index = Array.IndexOf(vowels, character);\n    if (index != -1) {\n        counters[index]++;\n    }\n}\n\nfor (int i = 0; i < vowels.Length; i++) {\n    Console.WriteLine($\"{vowels[i]}: {counters[i]}\");\n}",

  "PRO1: Concrete Exam Problem - 2D Arrays\n\nTask: Create a 3x3 2D array and fill it with random numbers from 1 to 10. Display the sum of all elements and the sum of diagonal elements.\n\nSolution:\nint[,] matrix = new int[3, 3];\nRandom rnd = new Random();\nint totalSum = 0;\nint diagonalSum = 0;\n\nfor (int i = 0; i < 3; i++) {\n    for (int j = 0; j < 3; j++) {\n        matrix[i, j] = rnd.Next(1, 11);\n        totalSum += matrix[i, j];\n        if (i == j) {\n            diagonalSum += matrix[i, j];\n        }\n    }\n}\n\nConsole.WriteLine($\"Total sum: {totalSum}\");\nConsole.WriteLine($\"Diagonal sum: {diagonalSum}\");",

  "PRO1: Typical Exam Problem Categories\n\n1. LOOPS AND ARRAYS (1-2 points)\n- Calculating sum/average of array elements\n- Finding maximum/minimum element\n- Filtering elements (even, odd, divisible by X)\n\n2. METHODS (2-3 points)\n- Writing methods with parameters and return values\n- Checking prime numbers, palindromes\n- Calculations (factorial, Fibonacci)\n\n3. CLASSES AND OBJECTS (2 points)\n- Class definition with constructors\n- Object creation and method usage\n- Working with multiple objects\n\n4. FILE HANDLING (2 points)\n- Reading and writing files\n- Processing data from files\n- Formatted output",

  "PRO1: Practical Tips for Solving Exam Problems\n\n1. Read the entire problem before starting\n2. Start with parts you know best\n3. Test your program with different inputs\n4. Comment your code - can earn extra points\n5. Check edge cases (n = 0, empty array)\n6. If you can't solve the whole problem, write at least part of it\n\nTime frame: 60 minutes\nGrading:\n- <5 points: 5 (fail)\n- 5-5.5: 6\n- 6-6.5: 7\n- 7-7.5: 8\n- 8-8.5: 9\n- 9-10: 10",

  "PRO1: Programming Basics - Output and Input\n\nConsole output:\nConsole.WriteLine(\"Hello!\");  // Output with new line\nConsole.Write(\"Enter name: \");  // Output without new line\n\nInput from console:\nstring name = Console.ReadLine();  // Read string\nint age = int.Parse(Console.ReadLine());  // Read number\n\nVariables:\nstring name = \"John\";\nint age = 20;\ndouble weight = 75.5;\nbool isEnrolled = true;",

  "PRO1: Conditional Statements and Branching\n\nBasic if statement:\nif (age >= 18) {\n    Console.WriteLine(\"Adult\");\n} else if (age >= 15) {\n    Console.WriteLine(\"Minor\");\n} else {\n    Console.WriteLine(\"Child\");\n}\n\nSwitch statement:\nswitch (day) {\n    case 1: Console.WriteLine(\"Monday\"); break;\n    case 2: Console.WriteLine(\"Tuesday\"); break;\n    default: Console.WriteLine(\"Sunday\"); break;\n}",

  "PRO1: Loops - while, do-while, for\n\nfor (int i = 1; i <= 10; i++) {\n    Console.WriteLine(i);\n}\n\nint counter = 1;\nwhile (counter <= 10) {\n    Console.WriteLine(counter);\n    counter++;\n}\n\nint password;\ndo {\n    Console.Write(\"Enter password: \");\n    password = int.Parse(Console.ReadLine());\n} while (password != 1234);",

  "PRO1: Arrays and Working with Them\n\nint[] numbers = new int[5];        // Empty array\nint[] numbers = {1, 2, 3, 4, 5};  // Array with values\n\nnumbers[0] = 10;      // Access element\nint x = numbers[2];   // Read value\nint length = numbers.Length;  // Array length\n\nArray.Sort(numbers);  // Sorting\nArray.Reverse(numbers);  // Reverse order",

  "PRO1: Methods - Basics\n\nstatic int Add(int a, int b) {\n    return a + b;\n}\n\nstatic void Greet(string name) {\n    Console.WriteLine($\"Hello, {name}!\");\n}\n\n// Method calls:\nint result = Add(5, 3);\nGreet(\"Ana\");",

  "PRO1: Classes and Objects\n\nclass Car {\n    public string Brand;\n    public int Year;\n    \n    public void DisplayInfo() {\n        Console.WriteLine($\"Brand: {Brand}, Year: {Year}\");\n    }\n}\n\n// Usage:\nCar myCar = new Car();\nmyCar.Brand = \"Toyota\";\nmyCar.Year = 2020;\nmyCar.DisplayInfo();",

  "PRO1: File Handling\n\nusing System.IO;\n\n// Check if file exists\nif (File.Exists(\"test.txt\")) {\n    // Reading\n    string content = File.ReadAllText(\"test.txt\");\n    string[] lines = File.ReadAllLines(\"test.txt\");\n    \n    // Writing\n    File.WriteAllText(\"output.txt\", content);\n    File.AppendAllText(\"log.txt\", \"New entry\\n\");\n}",

  "PRO1: Strings and String Methods\n\nstring name = \"John Smith\";\n\nname.Length                    // String length\nname.ToUpper()                 // Uppercase\nname.ToLower()                 // Lowercase\nname.Substring(0, 5)           // Substring\nname.IndexOf(\" \")              // Find position\nname.Replace(\" \", \"-\")         // Replace\nname.Trim()                    // Remove whitespace\nname.Split(' ')                // Split into array",

  "PRO1: Mathematics and Random Numbers\n\nMath.Sqrt(25)                 // Square root (5)\nMath.Pow(2, 3)                // Power (8)\nMath.Max(10, 20)              // Larger number (20)\nMath.Round(3.14159, 2)        // Rounding (3.14)\n\nRandom rnd = new Random();\nrnd.Next(1, 101)              // Random number 1-100\nrnd.NextDouble()               // Random decimal 0-1",

  "PRO1: Object-Oriented Programming - Methods in Classes\n\nMethods in classes operate on object data:\nclass Student {\n    public string Name;\n    public int Age;\n    \n    public void Introduce() {\n        Console.WriteLine($\"I am {Name}, {Age} years old\");\n    }\n    \n    public bool IsAdult() {\n        return Age >= 18;\n    }\n}\n\nUsage:\nStudent s = new Student();\ns.Name = \"Peter\";\ns.Age = 20;\ns.Introduce();  // Output: I am Peter, 20 years old\nbool adult = s.IsAdult();  // true",

  "PRO1: Course Requirements and Obligations\n\nFor successful course completion:\n- At least 80% attendance at labs\n- Timely submission of homework assignments\n- Completed project with defense\n- Passed written exam\n\nProject must include:\n- Custom classes and objects\n- Work with arrays\n- File reading/writing\n- User interface (console or graphical)\n\nExam: 60 minutes, theoretical and practical parts",

  "PRO1: Common Mistakes and Programming Tips\n\nCommon mistakes:\n- Missing semicolons\n- Case sensitivity errors (C# is case-sensitive)\n- Indexes start at 0, not 1\n- Incorrect type conversions\n\nProgramming tips:\n- Write readable code with meaningful names\n- Use methods to break down complex problems\n- Test code frequently\n- Comment complex code sections\n- Always check if file exists before reading",

  "PRO1: Project Example - Basic Structure\n\nBasic console application structure:\nusing System;\n\nclass Program {\n    static void Main() {\n        Console.OutputEncoding = System.Text.Encoding.UTF8;\n        \n        while (true) {\n            Console.WriteLine(\"1 - Option 1\");\n            Console.WriteLine(\"2 - Option 2\");\n            Console.WriteLine(\"3 - Exit\");\n            \n            string choice = Console.ReadLine();\n            \n            switch (choice) {\n                case \"1\": Option1(); break;\n                case \"2\": Option2(); break;\n                case \"3\": return;\n            }\n        }\n    }\n    \n    static void Option1() {\n        // Code for first option\n    }\n}",

  "PRO1: Explanation of Typical Exam Problems\n\nProblem 1: Loops (1 point)\nWrite a loop that prints all even numbers from 1 to 20.\n\nSolution:\nfor (int i = 1; i <= 20; i++) {\n    if (i % 2 == 0) {\n        Console.WriteLine(i);\n    }\n}\n\nProblem 2: Arrays (2 points)\nCreate an array of 10 numbers and calculate their sum.\n\nSolution:\nint[] numbers = new int[10];\nint sum = 0;\nfor (int i = 0; i < numbers.Length; i++) {\n    sum += numbers[i];\n}",

  "PRO1: Debugging and Error Detection\n\nDebugging techniques:\n- Use Console.WriteLine to print intermediate values\n- Check variable values in debugger\n- Break complex problems into smaller parts\n- Check edge cases (empty array, zero values)\n\nCommon loop errors:\n- Infinite loops (forgotten increment)\n- Wrong conditions\n- Array index out of bounds\n\nImportant: Always validate user input (e.g., if they enter string instead of number)",

  "PRO1: Data Type Conversion\n\nString to int:\nstring input = \"123\";\nint number = int.Parse(input);\n\nSafer way:\nif (int.TryParse(input, out int number)) {\n    // Successfully converted\n} else {\n    Console.WriteLine(\"Conversion error\");\n}\n\nInt to string:\nint x = 42;\nstring text = x.ToString();\n\nDouble to int:\ndouble d = 3.14;\nint i = (int)d;  // i = 3 (truncates decimal)",

  "PRO1: Object-Oriented Programming Principles\n\nBasic OOP principles:\n\n1. **Encapsulation** - data hiding\nclass Student {\n    private string name;  // private field\n    public string Name {  // public property\n        get { return name; }\n        set { name = value; }\n    }\n}\n\n2. **Inheritance** - extending classes\nclass Graduate : Student {\n    public int GraduationYear;\n}\n\n3. **Polymorphism** - different method forms\npublic virtual void Greet() { }\npublic override void Greet() { }",

  "PRO1: Advanced Array Operations\n\nArray searching and manipulation:\n// Find element in array\nint index = Array.IndexOf(numbers, 5);\n\n// Check if array contains value\nbool contains = numbers.Contains(10);\n\n// Copy array\nint[] copy = new int[numbers.Length];\nArray.Copy(numbers, copy, numbers.Length);\n\n// Clear array elements\nArray.Clear(numbers, 0, numbers.Length);\n\n// Binary search (requires sorted array)\nArray.Sort(numbers);\nint pos = Array.BinarySearch(numbers, 7);",

  "PRO1: Exception Handling\n\ntry-catch blocks for error handling:\ntry {\n    int number = int.Parse(Console.ReadLine());\n    int result = 100 / number;\n    Console.WriteLine($\"Result: {result}\");\n}\ncatch (FormatException) {\n    Console.WriteLine(\"Invalid number format!\");\n}\ncatch (DivideByZeroException) {\n    Console.WriteLine(\"Cannot divide by zero!\");\n}\ncatch (Exception ex) {\n    Console.WriteLine($\"Error: {ex.Message}\");\n}\nfinally {\n    Console.WriteLine(\"Execution completed\");\n}",

  "PRO1: Working with Lists\n\nLists are dynamic arrays:\nusing System.Collections.Generic;\n\nList<int> numbers = new List<int>();\n\n// Adding elements\nnumbers.Add(10);\nnumbers.Add(20);\nnumbers.Add(30);\n\n// Accessing elements\nint first = numbers[0];\n\n// Removing elements\nnumbers.Remove(20);\nnumbers.RemoveAt(0);\n\n// List properties and methods\nint count = numbers.Count;\nbool contains = numbers.Contains(10);\nnumbers.Sort();",

  "PRO1: String Manipulation Techniques\n\nAdvanced string operations:\n// String concatenation\nstring fullName = firstName + \" \" + lastName;\nstring fullName = $\"{firstName} {lastName}\";\n\n// String building for efficiency\nStringBuilder sb = new StringBuilder();\nsb.Append(\"Hello\");\nsb.Append(\" World\");\nstring result = sb.ToString();\n\n// String formatting\nstring formatted = String.Format(\"Name: {0}, Age: {1}\", name, age);\n\n// String comparison\nbool equal = string.Equals(str1, str2, StringComparison.OrdinalIgnoreCase);\nint comparison = string.Compare(str1, str2);",

  "PRO1: Recursion Basics\n\nRecursive methods call themselves:\n// Factorial calculation\nstatic int Factorial(int n) {\n    if (n <= 1) return 1;\n    return n * Factorial(n - 1);\n}\n\n// Fibonacci sequence\nstatic int Fibonacci(int n) {\n    if (n <= 1) return n;\n    return Fibonacci(n - 1) + Fibonacci(n - 2);\n}\n\n// Recursive array sum\nstatic int ArraySum(int[] arr, int index = 0) {\n    if (index >= arr.Length) return 0;\n    return arr[index] + ArraySum(arr, index + 1);\n}",

  "PRO1: LINQ Basics\n\nLanguage Integrated Query for data manipulation:\nusing System.Linq;\n\nint[] numbers = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n\n// Filtering\nvar evenNumbers = numbers.Where(n => n % 2 == 0);\nvar largeNumbers = numbers.Where(n => n > 5);\n\n// Projection\nvar squares = numbers.Select(n => n * n);\n\n// Aggregation\nint sum = numbers.Sum();\ndouble average = numbers.Average();\nint max = numbers.Max();\nint min = numbers.Min();\n\n// Sorting\nvar sorted = numbers.OrderBy(n => n);\nvar descending = numbers.OrderByDescending(n => n);",

  "PRO1: DateTime Operations\n\nWorking with dates and times:\n// Current date and time\nDateTime now = DateTime.Now;\nDateTime today = DateTime.Today;\n\n// Creating specific dates\nDateTime date = new DateTime(2024, 1, 15);\n\n// Date operations\nDateTime tomorrow = today.AddDays(1);\nDateTime nextWeek = today.AddDays(7);\nDateTime lastMonth = today.AddMonths(-1);\n\n// Date formatting\nstring formatted = date.ToString(\"dd.MM.yyyy\");\nstring usFormat = date.ToString(\"MM/dd/yyyy\");\n\n// Date comparison\nbool isAfter = date1 > date2;\nTimeSpan difference = date1 - date2;",

  "PRO1: Constants and Enumerations\n\nConstants and enums for better code:\n// Constants\nconst double PI = 3.14159;\nconst int MAX_SIZE = 100;\n\n// Enumerations\nenum Days { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }\nenum Status { Active = 1, Inactive = 0, Pending = 2 }\n\n// Using enums\nDays today = Days.Monday;\nif (today == Days.Saturday || today == Days.Sunday) {\n    Console.WriteLine(\"Weekend!\");\n}\n\n// Converting enums\nstring dayName = today.ToString();\nDays day = (Days)Enum.Parse(typeof(Days), \"Monday\");",

  "PRO1: Project Structure Best Practices\n\nOrganizing code in projects:\n// Separate classes into files\n// Student.cs\nclass Student {\n    public string Name;\n    public int Age;\n}\n\n// Program.cs\nclass Program {\n    static void Main() {\n        // Main program logic\n    }\n}\n\n// Using namespaces\nnamespace SchoolManagement {\n    class Student { }\n    class Course { }\n}\n\n// Code organization tips:\n- One class per file\n- Meaningful namespaces\n- Separate concerns\n- Use regions for large classes",

  "PRO1: Code Quality and Best Practices\n\nWriting clean, maintainable code:\n// Meaningful variable names\nint studentCount;  // Good\nint n;             // Bad\n\n// Consistent formatting\nif (condition) {\n    // Code here\n}\n\n// Method length\n// Keep methods short and focused (<= 20 lines)\n\n// Commenting strategy\n// Use XML comments for public methods\n/// <summary>\n/// Calculates the sum of two numbers\n/// </summary>\n/// <param name=\"a\">First number</param>\n/// <param name=\"b\">Second number</param>\n/// <returns>Sum of a and b</returns>\nstatic int Add(int a, int b) { return a + b; }",

  "PRO1: Memory Management Basics\n\nUnderstanding memory usage:\n// Value types (stored on stack)\nint x = 10;\ndouble y = 3.14;\nbool flag = true;\n\n// Reference types (stored on heap)\nstring name = \"John\";\nint[] numbers = new int[10];\nStudent student = new Student();\n\n// Garbage collection\n// Automatic memory management in C#\n// Objects no longer referenced are automatically collected\n\n// Disposable objects\nusing (StreamReader reader = new StreamReader(\"file.txt\")) {\n    string content = reader.ReadToEnd();\n} // Automatically calls Dispose()",

  "PRO1: Algorithm Complexity Basics\n\nUnderstanding code efficiency:\n// O(1) - Constant time\nint first = array[0];\n\n// O(n) - Linear time\nfor (int i = 0; i < array.Length; i++) {\n    Console.WriteLine(array[i]);\n}\n\n// O(n²) - Quadratic time\nfor (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n        // Operation\n    }\n}\n\n// Choosing efficient algorithms:\n- Use HashSet for fast lookups\n- Sort before searching\n- Avoid nested loops when possible\n- Use StringBuilder for multiple string operations",

  "PRO1: Testing and Validation\n\nInput validation and testing:\n// Input validation\nstatic int ReadPositiveNumber() {\n    int number;\n    while (true) {\n        Console.Write(\"Enter positive number: \");\n        if (int.TryParse(Console.ReadLine(), out number) && number > 0) {\n            return number;\n        }\n        Console.WriteLine(\"Invalid input!\");\n    }\n}\n\n// Simple unit testing\nstatic void TestAdd() {\n    int result = Add(2, 3);\n    if (result != 5) {\n        throw new Exception(\"Add test failed!\");\n    }\n    Console.WriteLine(\"Add test passed!\");\n}",

  "PRO1: Common Programming Patterns\n\nFrequently used patterns:\n// Factory pattern\nclass StudentFactory {\n    public static Student Create(string name, int age) {\n        return new Student { Name = name, Age = age };\n    }\n}\n\n// Singleton pattern\nclass Database {\n    private static Database instance;\n    public static Database Instance {\n        get {\n            if (instance == null) instance = new Database();\n            return instance;\n        }\n    }\n    private Database() { }\n}\n\n// Iterator pattern with foreach\nclass NumberCollection {\n    private int[] numbers = { 1, 2, 3, 4, 5 };\n    public IEnumerator<int> GetEnumerator() {\n        foreach (int number in numbers) yield return number;\n    }\n}"
]